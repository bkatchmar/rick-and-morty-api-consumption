{"version":3,"sources":["api_call/UrlEndPointGenerator.js","Character.js","Dashboard.js","IndividualCharacter.js","App.js","serviceWorker.js","index.js"],"names":["UrlEndPointGenerator","process","page","name","query","BaseEndPointUrl","id","Character","props","state","qsValues","this","processQueryString","selectedPage","fromPage","parseInt","getNewPage","pg","includeQueryString","that","processCharacterPageRequest","then","resp","setState","catch","error","pageNum","includeNameQueryString","currentNameSearch","NameSearch","nameSearch","Promise","resolve","reject","axios","get","GetCharactersUrl","processNewPaginationArray","data","info","pages","results","console","log","numPages","rtnVal","i","push","character","location","search","queryString","parse","CharacterRedirectId","to","CurrentPage","Container","Row","className","Col","md","Input","type","placeholder","value","onChange","event","target","Button","color","onClick","Table","responsive","striped","hover","Characters","map","index","key","processRowClick","species","status","gender","Pagination","Pages","PaginationItem","active","PaginationLink","Component","Dashboard","IndividualCharacter","charId","match","params","processCharacterRequest","GetIndividualCharacterUrl","image","BackToList","FromPage","lg","Card","ImageExists","CardImg","top","src","ImageUrl","alt","Name","CardBody","CardTitle","CardSubtitle","Gender","Species","App","fluid","Nav","pills","NavItem","NavLink","href","exact","path","component","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b3c7f06.chunk.js","sourcesContent":["class UrlEndPointGenerator {\r\n    static BaseEndPointUrl() {\r\n        return process.env.REACT_APP_API_URL;\r\n    }\r\n\r\n    static GetCharactersUrl(page,name) {\r\n        let query = \"\";\r\n        if (page && name) { query = `/?page=${page}&name=${name}`; }\r\n        else if (page) { query = `/?page=${page}`; }\r\n        else if (name) { query = `/?name=${name}`; }\r\n\r\n        return UrlEndPointGenerator.BaseEndPointUrl() + \"/character\" + query;\r\n    }\r\n\r\n    static GetIndividualCharacterUrl(id) {\r\n        return UrlEndPointGenerator.BaseEndPointUrl() + \"/character/\" + id;\r\n    }\r\n}\r\n\r\nexport default UrlEndPointGenerator;","import React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { Button, Container, Row, Col, Table, Pagination, PaginationItem, PaginationLink, Input } from \"reactstrap\";\r\nimport queryString from \"query-string\";\r\nimport UrlEndPointGenerator from \"./api_call/UrlEndPointGenerator\";\r\nimport \"./Character.css\"\r\n\r\nclass Character extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \"CharacterRedirectId\" : 0, \"NameSearch\" : \"\", \"CurrentPage\" : 1, \"Pages\" : [1], \"Characters\" : [] };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let qsValues = this.processQueryString();\r\n        let selectedPage = (qsValues.fromPage) ? parseInt(qsValues.fromPage) : 1;\r\n        this.getNewPage(selectedPage,true);\r\n    }\r\n\r\n    getNewPage(pg,includeQueryString) {\r\n        let that = this;\r\n        that.processCharacterPageRequest(pg,includeQueryString).then(resp => { that.setState(resp); }).catch(error => { that.setState(error); });\r\n    }\r\n\r\n    processCharacterPageRequest(pageNum,includeNameQueryString) {\r\n        let that = this;\r\n        let currentNameSearch = this.state.NameSearch;\r\n        if (!pageNum) { pageNum = 1; }\r\n        if (includeNameQueryString && currentNameSearch === \"\") {\r\n            let qsValues = this.processQueryString();\r\n            currentNameSearch = (qsValues.nameSearch) ? qsValues.nameSearch : \"\";\r\n        }\r\n        \r\n        return new Promise((resolve, reject) => {\r\n            axios.get(UrlEndPointGenerator.GetCharactersUrl(pageNum,currentNameSearch)).then(resp => {\r\n                resolve({\r\n                    \"CharacterRedirectId\" : 0,\r\n                    \"NameSearch\" : currentNameSearch,\r\n                    \"CurrentPage\" : pageNum,\r\n                    \"Pages\" : that.processNewPaginationArray(resp.data.info.pages),\r\n                    \"Characters\" : resp.data.results\r\n                });\r\n            }).catch(error => {\r\n                console.log(error);\r\n                reject({\r\n                    \"CharacterRedirectId\" : 0,\r\n                    \"NameSearch\" : \"\",\r\n                    \"CurrentPage\" : 1,\r\n                    \"Pages\" : [1],\r\n                    \"Characters\" : []\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    processNewPaginationArray(numPages) {\r\n        let rtnVal = [];\r\n        for (let i = 1; i <= numPages; i++) {\r\n            rtnVal.push(i);\r\n        }\r\n        return rtnVal;\r\n    }\r\n\r\n    processRowClick(character) {\r\n        this.setState({ \"CharacterRedirectId\" : character.id });\r\n    }\r\n\r\n    processQueryString() {\r\n        let rtnVal = {};\r\n        rtnVal = (this.props && this.props.location && this.props.location.search) ? queryString.parse(this.props.location.search) : {};\r\n        return rtnVal;\r\n    }\r\n\r\n    render() {\r\n        if (this.state.CharacterRedirectId > 0) { return <Redirect to={\"/character/\" + this.state.CharacterRedirectId + \"?fromPage=\" + this.state.CurrentPage + (this.state.NameSearch === \"\" ? \"\" : \"&nameSearch=\" + this.state.NameSearch)} /> }\r\n\r\n        return (\r\n            <Container>\r\n                <Row className=\"name-search\">\r\n                    <Col md=\"11\">\r\n                        <Input type=\"text\"\r\n                            name=\"name-search\"\r\n                            id=\"name-search\"\r\n                            placeholder=\"Search By Name\"\r\n                            value={this.state.NameSearch}\r\n                            onChange={(event) => this.setState({ NameSearch : event.target.value })} />\r\n                    </Col>\r\n                    <Col md=\"1\"><Button color=\"primary\" onClick={() => this.getNewPage(1,false)}>Search</Button></Col>\r\n                </Row>\r\n                <Table responsive striped hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Species</th>\r\n                            <th>Status</th>\r\n                            <th>Gender</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.Characters.map((value, index) => {\r\n                            return(\r\n                                <tr key={value.id} onClick={() => {this.processRowClick(value)}}>\r\n                                    <td>{value.name}</td>\r\n                                    <td>{value.species}</td>\r\n                                    <td>{value.status}</td>\r\n                                    <td>{value.gender}</td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                </Table>\r\n                <Pagination>\r\n                    {this.state.Pages.map((value, index) => {\r\n                        return (\r\n                            <PaginationItem key={index} active={this.state.CurrentPage === value}>\r\n                                <PaginationLink onClick={() => this.getNewPage(value,true)}>{value}</PaginationLink>\r\n                            </PaginationItem>\r\n                        )\r\n                    })}\r\n                </Pagination>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Character;","import React, { Component } from \"react\";\r\nimport \"./Dashboard.css\";\r\n\r\nclass Dashboard extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"text-center\">Putting Dashboard Related Things Here For Later</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dashboard;","import React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Container, Row, Col, Card, CardImg, CardBody, CardTitle, CardSubtitle, Button } from \"reactstrap\";\r\nimport axios from \"axios\";\r\nimport queryString from \"query-string\";\r\nimport UrlEndPointGenerator from \"./api_call/UrlEndPointGenerator\";\r\nimport \"./IndividualCharacter.css\";\r\n\r\nclass IndividualCharacter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \"BackToList\" : false, \"ImageExists\" : false, \"ImageUrl\" : \"\", \"Name\": \"\", \"Gender\" : \"\", \"Species\" : \"\", \"FromPage\" : 1, \"NameSearch\" : \"\" };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let that = this;\r\n        let charId = (that.props.match && that.props.match.params && that.props.match.params.id) ? that.props.match.params.id : 0;\r\n        that.processCharacterRequest(charId).then(resp => that.setState(resp)).catch(error => that.setState(error));\r\n    }\r\n\r\n    processCharacterRequest(charId) {\r\n        if (!charId) { charId = 0; }\r\n        let qsValues = this.processQueryString();\r\n        \r\n        return new Promise((resolve, reject) => {\r\n            if (charId === 0) {\r\n                resolve({ \"BackToList\" : false, \"ImageExists\" : false, \"ImageUrl\" : \"\", \"Name\": \"\", \"Gender\" : \"\", \"Species\" : \"\", \"FromPage\" : 1, \"NameSearch\" : \"\" });\r\n            } else {\r\n                axios.get(UrlEndPointGenerator.GetIndividualCharacterUrl(charId)).then(resp => {\r\n                    resolve({\r\n                        \"BackToList\" : false,\r\n                        \"ImageExists\" : (resp.data.image && resp.data.image !== \"\"),\r\n                        \"ImageUrl\" : resp.data.image,\r\n                        \"Name\": resp.data.name,\r\n                        \"Gender\" : resp.data.gender,\r\n                        \"Species\" : resp.data.species,\r\n                        \"FromPage\" : (qsValues.fromPage) ? qsValues.fromPage : 1,\r\n                        \"NameSearch\" : (qsValues.nameSearch) ? qsValues.nameSearch : \"\"\r\n                    });\r\n                }).catch(error => {\r\n                    console.log(error);\r\n                    reject({\r\n                        \"BackToList\" : false,\r\n                        \"ImageExists\" : false,\r\n                        \"ImageUrl\" : \"\",\r\n                        \"Name\": \"\",\r\n                        \"Gender\" : \"\",\r\n                        \"Species\" : \"\",\r\n                        \"FromPage\" : 1,\r\n                        \"NameSearch\" : \"\"\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    processQueryString() {\r\n        let rtnVal = {};\r\n        rtnVal = (this.props && this.props.location && this.props.location.search) ? queryString.parse(this.props.location.search) : {};\r\n        return rtnVal;\r\n    }\r\n\r\n    render() {\r\n        if (this.state.BackToList) { return <Redirect to={\"/characters/?fromPage=\" + this.state.FromPage + (this.state.NameSearch === \"\" ? \"\" : \"&nameSearch=\" + this.state.NameSearch)} /> }\r\n        \r\n        return (\r\n            <Container className=\"text-center individual-character\">\r\n                <Row>\r\n                    <Col lg=\"12\">\r\n                        <Card>\r\n                            {this.state.ImageExists &&\r\n                                <CardImg top src={this.state.ImageUrl} alt={this.state.Name} id=\"character-portrait\" />\r\n                            }\r\n                            <CardBody>\r\n                                <CardTitle>{this.state.Name}</CardTitle>\r\n                                <CardSubtitle>{this.state.Gender}{' '}{this.state.Species}</CardSubtitle>\r\n                                <Button color=\"primary\" onClick={() => this.setState({\"BackToList\" : true})}>Back</Button>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default IndividualCharacter;","import React, { Component } from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport { Container, Nav, NavItem, NavLink } from \"reactstrap\";\nimport Character from \"./Character\";\nimport Dashboard from \"./Dashboard\";\nimport IndividualCharacter from \"./IndividualCharacter\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Container fluid className=\"home-app\">\n        <h1>Welcome To The Rick and Morty React App</h1>\n        <Nav pills>\n          <NavItem>\n            <NavLink href=\"#/characters\">Characters</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"#\">Episode Guide</NavLink>\n          </NavItem>\n        </Nav>\n        <HashRouter>\n          <Route exact={true} path=\"/\" component={Dashboard}/>\n          <Route exact={true} path=\"/characters\" component={Character}/>\n          <Route exact={true} path=\"/character/:id\" component={IndividualCharacter}/>\n        </HashRouter>\n      </Container>\n  )};\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}