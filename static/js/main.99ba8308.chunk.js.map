{"version":3,"sources":["api_call/UrlEndPointGenerator.js","Character.js","Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["UrlEndPointGenerator","process","page","BaseEndPointUrl","Character","props","state","that","this","axios","get","GetCharactersUrl","then","resp","setState","processNewPaginationArray","data","info","pages","results","catch","error","console","log","prevProps","prevState","snapshot","pg","numPages","rtnVal","i","push","Container","Table","responsive","striped","hover","Characters","map","value","index","key","id","name","species","status","gender","Pagination","Pages","PaginationItem","active","CurrentPage","PaginationLink","onClick","getNewPage","Component","Dashboard","className","App","fluid","Nav","pills","NavItem","NavLink","href","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uZAceA,E,+GAZP,MAAOC,oC,uCAGaC,GACpB,OAAIA,EACOF,EAAqBG,kBAAoB,oBAAsBD,EAE/DF,EAAqBG,kBAAoB,iB,KC8E7CC,E,YAjFX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CAAE,YAAgB,EAAG,MAAU,CAAC,GAAI,WAAe,IAFjD,E,iFAMf,IAAIC,EAAOC,KACXC,IAAMC,IAAIV,EAAqBW,oBAAoBC,MAAK,SAAAC,GACpDN,EAAKO,SAAS,CACV,YAAgB,EAChB,MAAUP,EAAKQ,0BAA0BF,EAAKG,KAAKC,KAAKC,OACxD,WAAeL,EAAKG,KAAKG,aAE9BC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,yCAIDG,EAAWC,EAAWC,M,iCAE9BC,GACP,IAAIpB,EAAOC,KACXC,IAAMC,IAAIV,EAAqBW,iBAAiBgB,IAAKf,MAAK,SAAAC,GACtDN,EAAKO,SAAS,CACV,YAAgBa,EAChB,MAAUpB,EAAKQ,0BAA0BF,EAAKG,KAAKC,KAAKC,OACxD,WAAeL,EAAKG,KAAKG,aAE9BC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZd,EAAKO,SAAS,CAAE,YAAgB,EAAG,MAAU,CAAC,GAAI,WAAe,U,gDAI/Cc,GAEtB,IADA,IAAIC,EAAS,GACJC,EAAI,EAAGA,GAAKF,EAAUE,IAC3BD,EAAOE,KAAKD,GAEhB,OAAOD,I,+BAGD,IAAD,OACL,OACI,kBAACG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,YAAU,EAACC,SAAO,EAACC,OAAK,GAC3B,+BACI,4BACI,oCACA,uCACA,sCACA,wCAGR,+BACK5B,KAAKF,MAAM+B,WAAWC,KAAI,SAACC,EAAOC,GAC/B,OACI,wBAAIC,IAAKF,EAAMG,IACX,4BAAKH,EAAMI,MACX,4BAAKJ,EAAMK,SACX,4BAAKL,EAAMM,QACX,4BAAKN,EAAMO,cAM/B,kBAACC,EAAA,EAAD,KACKvC,KAAKF,MAAM0C,MAAMV,KAAI,SAACC,EAAOC,GAC1B,OACI,kBAACS,EAAA,EAAD,CAAgBR,IAAKD,EAAOU,OAAQ,EAAK5C,MAAM6C,cAAgBZ,GAC3D,kBAACa,EAAA,EAAD,CAAgBC,QAAS,kBAAM,EAAKC,WAAWf,KAASA,a,GAxEhEgB,aCMTC,G,uLANP,OACI,yBAAKC,UAAU,eAAf,uD,GAHYF,c,MCwBTG,MApBf,WACE,OACE,kBAAC1B,EAAA,EAAD,CAAW2B,OAAK,EAACF,UAAU,YACzB,uEACA,kBAACG,EAAA,EAAD,CAAKC,OAAK,GACR,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASC,KAAK,gBAAd,eAEF,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASC,KAAK,KAAd,mBAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAO,EAAMC,KAAK,IAAIC,UAAWX,IACxC,kBAAC,IAAD,CAAOS,OAAO,EAAMC,KAAK,cAAcC,UAAW/D,OCTtCgE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnE,MAAK,SAAAoE,GACjCA,EAAaC,kB","file":"static/js/main.99ba8308.chunk.js","sourcesContent":["class UrlEndPointGenerator {\r\n    static BaseEndPointUrl() {\r\n        return process.env.REACT_APP_API_URL;\r\n    }\r\n\r\n    static GetCharactersUrl(page) {\r\n        if (page) {\r\n            return UrlEndPointGenerator.BaseEndPointUrl() + \"/character/?page=\" + page;\r\n        } else {\r\n            return UrlEndPointGenerator.BaseEndPointUrl() + \"/character\";\r\n        }\r\n    }\r\n}\r\n\r\nexport default UrlEndPointGenerator;","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Container, Table, Pagination, PaginationItem, PaginationLink } from \"reactstrap\";\r\nimport UrlEndPointGenerator from \"./api_call/UrlEndPointGenerator\";\r\n\r\nclass Character extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \"CurrentPage\" : 1, \"Pages\" : [1], \"Characters\" : [] };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let that = this;\r\n        axios.get(UrlEndPointGenerator.GetCharactersUrl()).then(resp => {\r\n            that.setState({\r\n                \"CurrentPage\" : 1,\r\n                \"Pages\" : that.processNewPaginationArray(resp.data.info.pages),\r\n                \"Characters\" : resp.data.results\r\n            });\r\n        }).catch(error => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {}\r\n\r\n    getNewPage(pg) {\r\n        let that = this;\r\n        axios.get(UrlEndPointGenerator.GetCharactersUrl(pg)).then(resp => {\r\n            that.setState({\r\n                \"CurrentPage\" : pg,\r\n                \"Pages\" : that.processNewPaginationArray(resp.data.info.pages),\r\n                \"Characters\" : resp.data.results\r\n            });\r\n        }).catch(error => {\r\n            console.log(error);\r\n            that.setState({ \"CurrentPage\" : 1, \"Pages\" : [1], \"Characters\" : [] });\r\n        });\r\n    }\r\n\r\n    processNewPaginationArray(numPages) {\r\n        let rtnVal = [];\r\n        for (let i = 1; i <= numPages; i++) {\r\n            rtnVal.push(i);\r\n        }\r\n        return rtnVal;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Table responsive striped hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Species</th>\r\n                            <th>Status</th>\r\n                            <th>Gender</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.Characters.map((value, index) => {\r\n                            return(\r\n                                <tr key={value.id}>\r\n                                    <td>{value.name}</td>\r\n                                    <td>{value.species}</td>\r\n                                    <td>{value.status}</td>\r\n                                    <td>{value.gender}</td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                </Table>\r\n                <Pagination>\r\n                    {this.state.Pages.map((value, index) => {\r\n                        return (\r\n                            <PaginationItem key={index} active={this.state.CurrentPage === value}>\r\n                                <PaginationLink onClick={() => this.getNewPage(value)}>{value}</PaginationLink>\r\n                            </PaginationItem>\r\n                        )\r\n                    })}\r\n                </Pagination>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Character;","import React, { Component } from \"react\";\r\nimport \"./Dashboard.css\";\r\n\r\nclass Dashboard extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"text-center\">Putting Dashboard Related Things Here For Later</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dashboard;","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport { Container, Nav, NavItem, NavLink } from \"reactstrap\";\nimport Character from \"./Character\";\nimport Dashboard from \"./Dashboard\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Container fluid className=\"home-app\">\n      <h1>Welcome To The Rick and Morty React App</h1>\n      <Nav pills>\n        <NavItem>\n          <NavLink href=\"#/characters\">Characters</NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink href=\"#\">Episode Guide</NavLink>\n        </NavItem>\n      </Nav>\n      <HashRouter>\n        <Route exact={true} path=\"/\" component={Dashboard}/>\n        <Route exact={true} path=\"/characters\" component={Character}/>\n      </HashRouter>\n    </Container>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}